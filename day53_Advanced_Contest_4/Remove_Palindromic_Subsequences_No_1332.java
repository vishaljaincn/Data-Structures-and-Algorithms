package day53_Advanced_Contest_4;
/*
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic
subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without
changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
 */
public class Remove_Palindromic_Subsequences_No_1332 {
    // Function to remove palindromic substrings
    public static int removePalindromeSub(String s) {
        int i = 0;                    // Initialize a pointer at the beginning of the string
        int j = s.length() - 1;       // Initialize a pointer at the end of the string

        while (i < j) {               // Continue while the first pointer is less than the second pointer
            if (s.charAt(i) == s.charAt(j)) {
                // If characters at the current positions are the same, move the pointers towards each other.
                i++;
                j--;
            } else {
                // If characters are different, it's not a palindrome, so return 2.
                return 2;
            }
        }

        // If the loop completes, it means the string is empty (all palindromes are removed) or a single-character palindrome remains.
        return 1;
    }

    public static void main(String[] args) {
        System.out.println(removePalindromeSub("ababa"));
        System.out.println(removePalindromeSub("abb"));
        System.out.println(removePalindromeSub("baabb"));
    }
}
